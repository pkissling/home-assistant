---

- alias: Alarm - Night Routine
  trigger:
    platform: template
    value_template: >
      {{
        state_attr('light.living_room_lamp', 'flowing') == True
          and
        is_state('light.living_room_lamp', 'on')
      }}
  condition:
    condition: time  # TODO find better condition!
    after: '18:00:00'
    before: '02:00:00'
  action:
    # Dim bedroom light down, if on
    - choose:
        - conditions:
            - condition: state
              entity_id: light.bedroom_wardrobe
              state: 'on'
          sequence:
            - service: light.turn_on
              entity_id: light.bedroom_wardrobe
              data:
                brightness: 50
                transition: 120  # 2 min
    - service: switch.turn_off
      entity_id: switch.remote_off
    - service: media_player.volume_set
      entity_id: media_player.bedroom
      data:
        volume_level: 0.3
    - wait_for_trigger:
        platform: state
        entity_id: media_player.bedroom
        from: playing
        to: 'off'
      continue_on_timeout: false
      timeout: '0:15:00'
    - choose:
        - conditions:
            - condition: state
              entity_id: group.window_all
              state: 'on'
            - condition: state
              entity_id: input_boolean.summer_mode
              state: 'off'
          sequence:
            - service: tts.google_translate_say
              entity_id: media_player.bedroom
              data:
                message: >
                  Windows are open in:
                  {{
                    expand('group.window_all')
                    | selectattr('state', 'eq', 'on')
                    | map(attribute='name')
                    | join(',')
                    | replace('Window', '')
                  }}
            - wait_for_trigger:
                platform: state
                entity_id: media_player.bedroom
                from: playing
                to: idle
              continue_on_timeout: true
              timeout: '0:02:00'
    - choose:
        - conditions:
            condition: state
            entity_id: switch.alarm
            state: 'on'
          sequence:
            service: tts.google_translate_say
            entity_id: media_player.bedroom
            data:
              message: >
                The alarm is set to
                {{ state_attr('input_datetime.wakeup_time', 'hour') }}
                {{ state_attr('input_datetime.wakeup_time', 'minute') }}.
                Good night!
      default:
        service: tts.google_translate_say
        entity_id: media_player.bedroom
        data:
          message: "No alarm set for tomorrow. Good night!"
    - wait_for_trigger:
        platform: state
        entity_id: media_player.bedroom
        from: playing
        to: idle
      continue_on_timeout: true
      timeout: '0:02:00'
    - service: media_player.turn_off
      entity_id: media_player.bedroom
    - service: media_player.volume_set
      entity_id: media_player.bedroom
      data:
        volume_level: 0.15
    - service: script.light_ambient_turn_off
      data:
        transition: 300  # 5 min

- alias: Alarm - Morning Routine - Sunrise Lights
  trigger:
    platform: template
    # TODO
    value_template: "{{ ((strptime(states('sensor.time'), '%H:%M').time().hour * 60 + strptime(states('sensor.time'), '%H:%M').time().minute) * 60) | int == (state_attr('input_datetime.wakeup_time', 'timestamp') | int) - 60 * 15 }}"
  condition:
    - condition: state
      entity_id: switch.alarm
      state: 'on'
    - condition: state
      entity_id: group.residents
      state: home
  action:
    - service: script.light_ambient_turn_on
      data:
        transition: 1800  # 30 min
    # Control wardrobe light independently of script
    - service: light.turn_on
      entity_id: light.bedroom_wardrobe
      data:
        brightness: 220
        kelvin: 1800
        transition: 1800  # 30 mins

- alias: Alarm - Morning Routine - News and Radio
  trigger:
    platform: time
    at: input_datetime.wakeup_time
  condition:
    - condition: state
      entity_id: switch.alarm
      state: 'on'
    - condition: state
      entity_id: group.residents
      state: home
  action:
    # - service: media_player.volume_set
    #   entity_id: media_player.bedroom
    #   data:
    #     volume_level: 0.15
    # - service: media_player.play_media
    #   entity_id: media_player.home_group
    #   data:
    #     media_content_id: http://nrj.de/muenchen
    #     media_content_type: music
    # - delay:
    #     seconds: 1 ## TODO
    # - service: media_extractor.play_media
    #   entity_id: media_player.bedroom
    #   data:
    #     media_content_id: http://www.tagesschau.de/100sekunden/index.html
    #     media_content_type: video
    # - wait_for_trigger:
    #     platform: state
    #     entity_id: media_player.bedroom
    #     from: playing
    #     to: idle
    #   continue_on_timeout: false
    #   timeout: '0:03:00'
    - service: media_player.volume_set
      entity_id: media_player.bedroom
      data:
        volume_level: 0.1
    - service: media_player.play_media
      entity_id: media_player.home_group
      data:
        media_content_id: http://nrj.de/muenchen
        media_content_type: music
    - wait_for_trigger:
        platform: state
        entity_id: media_player.bedroom
        from: playing
        to: 'off'
      continue_on_timeout: true
      timeout: '1:00:00'

- alias: Alarm - Toggle alarm when alarm needs adjustment due to workday
  trigger:
    platform: time
    at: '12:00:00'
  condition:
    condition: template
    value_template: >
      {% if (now().weekday() + 6) % 7 == 1 %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_1') %}
      {% elif (now().weekday() + 6) % 7== 2 %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_2') %}
      {% elif (now().weekday() + 6) % 7 == 3 %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_3') %}
      {% elif (now().weekday() + 6) % 7 == 4 %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_4') %}
      {% elif (now().weekday() + 6) % 7 == 5 %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_5') %}
      {% elif (now().weekday() + 6) % 7 == 6 %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_6') %}
      {% else %}
        {% set alarm_in_6_days = states('input_boolean.alarm_weekday_0') %}
      {% endif %}
      {{ states('binary_sensor.workday_sensor') != alarm_in_6_days }}
  action:
    - service: input_boolean.toggle
      data:
        entity_id: "input_boolean.alarm_weekday_{{ (now().weekday() + 6) % 7 }}"
    - service: notify.patrick
      data:
        title: Alarm Clock
        message: >
          {% set days = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"] %}
          Alarm for next {{ days[(now().weekday() + 6) % 7] }} turned {{ states('binary_sensor.workday_sensor') }}.
