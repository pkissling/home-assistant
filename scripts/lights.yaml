---

light_ambient_turn_on:
  fields:
    transition:
      description: Time in seconds until transition ends.
      required: 'false'
      default: 0
  sequence:
    - service: light.turn_on
      entity_id: light.bedroom_wardrobe
      data:
        kelvin: 1000
        brightness: 100
        transition: "{{ transition }}"
    - choose:
        - conditions:
            condition: state
            entity_id: input_boolean.tv_mode
            state: 'on'
          sequence:
            - service: light.turn_on
              entity_id: light.living_room
              data:
                kelvin: 2300
                brightness: 80
                transition: "{{ transition }}"
            - service: input_text.set_value
              entity_id: input_text.old_brightness_living_room
              data:
                value: 255
      default:
        service: light.turn_on
        entity_id: light.living_room
        data:
          kelvin: 2300
          brightness: 255
          transition: "{{ transition }}"
    - service: light.turn_on
      entity_id: light.corridor_sideboard
      data:
        kelvin: 2300
        brightness: 50
        transition: "{{ transition }}"
    - choose:
        - conditions:
            condition: state
            entity_id: switch.guest_mode
            state: 'off'
          sequence:
            service: light.turn_on
            entity_id: light.study_shelf
            data:
              kelvin: 2300
              brightness: 50
              transition: "{{ transition }}"
    # keep script in state 'on' until script finished
    - delay: "{{ transition }}"

light_ambient_turn_off:
  fields:
    transition:
      description: Time in seconds until transition ends.
  sequence:
    - service: light.turn_on
      entity_id: light.bedroom_wardrobe
      data:
        brightness: 0
        transition: "{{ transition }}"
    - service: light.turn_on
      entity_id: light.living_room
      data:
        brightness: 0
        transition: "{{ transition }}"
    - service: light.turn_on
      entity_id: light.corridor_sideboard
      data:
        brightness: 0
        transition: "{{ transition }}"
    - choose:
        - conditions:
            condition: state
            entity_id: switch.guest_mode
            state: 'off'
          sequence:
            - service: light.turn_on
              entity_id: light.study_shelf
              data:
                brightness: 0
                transition: "{{ transition }}"
            - service: light.turn_on
              entity_id: light.study_floor_lamp
              data:
                brightness: 0
                transition: "{{ transition }}"
    # keep script in state 'on' until script finished
    - delay: "{{ transition }}"

light_turn_on:
  variables:
    light_entity:
    motion_sensor_entity:
    full_brightness: 200
    dim_brightness: 50
    dim_after_mins: 5
  mode: parallel
  sequence:
    - condition: and
      conditions:
        - "{{ not is_state('vacuum.xiaomi_vacuum_cleaner', 'cleaning') }}"
        - "{{ not is_state('vacuum.xiaomi_vacuum_cleaner', 'returning') }}"
        - condition: state
          entity_id: binary_sensor.sun
          state: 'off'
    # if light on and script.light_ambient_turn_off is off and no night light
    - choose:
        - conditions:
            - "{{ is_state(light_entity, 'on') }}"
            - condition: state
              entity_id: script.light_ambient_turn_off
              state: 'off'
            - condition: state
              entity_id: input_boolean.night_light
              state: 'off'
            sequence:
                # turn lights to full brightness
                - service: light.turn_on
                  data:
                    entity_id: "{{ light_entity }}"
                    brightness: "{{ full_brightness }}"
                - wait_template: "{{ is_state(motion_sensor_entity,'off') }}"
                # TODO if motion sensor off for {{ dim_after_mins }} mins
                - service: light.turn_on
                  data:
                    entity_id: "{{ light_entity }}"
                    transition: 60  # 1 min
                    brightness: "{{ dim_brightness }}"
      # else
      default:
        # turn lights to low brightness
        - service: input_boolean.turn_on
          entity_id: input_boolean.night_light
        - service: light.turn_on
          data:
            entity_id: "{{ light_entity }}"
            brightness: "{{ dim_brightness }}"
        - wait_template: "{{ is_state(motion_sensor_entity,'off') }}"
          # TODO if motion sensor off for 5 mins
          timeout: '00:30:00'
        - service: light.turn_off
          data:
            entity_id: "{{ light_entity }}"
            transition: 60  # 1 min
        - wait_template: "{{ is_state(light_entity,'off') }}"
          timeout: '00:10:00'
        - service: input_boolean.turn_off
          entity_id: input_boolean.night_light
